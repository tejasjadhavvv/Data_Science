                                           ***This is all the query with problem Statment for each query with solved Query***




create table ipl_ball ( id int , inning int , over int , ball int , batsman varchar(255), non_striker varchar(255), bowler varchar(255),batsman_runs int ,extra_runs int ,total_runs int ,is_wicket int, dismissal_kind varchar(255), player_dismissed varchar(255), fielder varchar(255), extras_type varchar(255), batting_team varchar (255), bowling_team varchar(255) );


select * from ipl_ball ;


copy ipl_ball from 'C:\Program Files\PostgreSQL\15\data\IPL_Ball.csv' delimiter ',' csv header ;


-- drop table ipl_ball ;



select * from ipl_ball;




create table match_data (id int , city varchar(255), date date ,player_of_match varchar(255), venue varchar(255), neutral_venue varchar(255), team1 varchar(255), team2 varchar(255),toss_winner varchar(255),toss_decision varchar(255),winner varchar(255),result varchar(255),result_margin int , eliminator varchar(10), method varchar(255), umpire1 varchar(255),umpire2 varchar(255));



copy match_data from 'C:\Program Files\PostgreSQL\15\data\IPL_matches.csv' delimiter ',' csv header ;



--select * from match_data;


select * from ipl_ball ;

select * from match_data;



Q1==> Select the top 20 rows of the deliveries table after ordering them by id, inning, over, ball in ascending order.




      select * from ipl_ball order by id , inning , over , ball asc limit(20);



Q2==> Select the top 20 rows of the matches table.



     select * from match_data order by result_margin desc limit(20) ;




Q3==> Fetch data of all the matches played on 2nd May 2013 from the matches table.




      select * from match_data where date ='2013-05-02';





Q4==> Fetch data of all the matches where the result mode is ‘runs’ and margin of victory is more than 100 runs.




     select * from match_data where result = 'runs' and result_margin > 100 ;






Q5==> Fetch data of all the matches where the final scores of both teams tied and order it in descending order of the date.



     select * from match_data where eliminator= 'Y' order by date desc ;




Q6==> Get the count of cities that have hosted an IPL match.




     select city , count(city) as "Matches_Played" from match_data group by city ;





Q7==> Create table deliveries_v02 with all the columns of the table ‘deliveries’ and an additional column ball_result containing values boundary, dot or other depending on the total_run (boundary for >= 4, dot for 0 and other for any other number)
      (Hint 1 : CASE WHEN statement is used to get condition based results)
      (Hint 2: To convert the output data of select statement into a table, you can use a subquery. Create table table_name as [entire select statement].
 
 
 
 
 create table deliveries_v02 as select * ,  case
                                               when total_runs = 0 then 'Dot_ball'
                                               when total_runs = 4 then 'Four'
                                               when total_runs = 6 then 'Six' else 'Runs'  end as ball_Result from ipl_ball;



select * from deliveries_v02;

 
 
 

Q8==> Write a query to fetch the total number of boundaries and dot balls from the deliveries_v02 table.


 
 
     select total_runs , count(total_runs)  from deliveries_v02 where total_runs in ( 0 ,4,6) group by total_runs ;





Q9==> Write a query to fetch the total number of boundaries scored by each team from the deliveries_v02 
      table and order it in descending order of the number of boundaries scored.



 
     select batting_team , count(total_runs) from deliveries_v02 where total_runs in (4,6) group by batting_team order by count desc ;





Q10==> Write a query to fetch the total number of dot balls bowled by each team and order it in descending order of the total number of dot balls bowled.



     select bowling_team , count(ball_result) from deliveries_v02 where ball_result = 'Dot_ball' group by bowling_team order by count desc ;


 


Q11==> Write a query to fetch the total number of dismissals by dismissal kinds where dismissal kind is not NA


    --  <> this is also used as not logical opertor in sql 
    select dismissal_kind , count(dismissal_kind) from ipl_ball where dismissal_kind <> 'NA'  group by dismissal_kind order by count desc ;
 



 
Q12==> Write a query to get the top 5 bowlers who conceded maximum extra runs from the deliveries table

 
 
      select bowler , sum(extra_runs) from ipl_ball group by bowler order by sum desc limit(5);





Q13==> Write a query to create a table named deliveries_v03 with all the columns of deliveries_v02
       table and two additional column (named venue and match_date) of venue and date from table matches

 


    create table deliveries_v03  as select a.* , b.venue , b.date as match_date from deliveries_v02 as a
    left join 
    match_data as b on a.id = b.id ;

 
    select * from deliveries_v03;
 
 
 
 
Q14==> Write a query to fetch the total runs scored for each venue and order it in the descending order of total runs scored.


     select venue , sum(total_runs) from deliveries_v03 group by venue order by sum desc;
 
 

 
 
Q15==> Write a query to fetch the year-wise total runs scored at Eden Gardens and order it in the descending order of total runs scored.



      --  select extract(year from to_date('2020-12-7','yyyy-mm-dd'));
 
 
      select extract(year from match_date) , sum(total_runs) from deliveries_v03 where venue = 'Eden Gardens' group by extract order by sum desc;
 
 

Q16==> Get unique team1 names from the matches table, you will notice that there are two entries for Rising Pune Supergiant
       one with Rising Pune Supergiant and another one with Rising Pune Supergiants.  Your task is to create a matches_corrected
       table with two additional columns team1_corr and team2_corr 
       containing team names with replacing Rising Pune Supergiants with Rising Pune Supergiant. Now analyse these newly created columns
 
 


 
    select distinct team1 from match_data;
 
    create table matches_corrected as select * , replace (team1,'Rising Pune Supergiants','Rising Pune Supergiant') as team1_corr , replace (team2,'Rising Pune Supergiants','Rising Pune Supergiant') as team2_corr from match_data ;
 
 
    select distinct team1_corr from matches_corrected;
 
 
    select * from matches_corrected;
 
 
 


 
 Q17==> Create a new table deliveries_v04 with the first column as ball_id containing information of match_id, inning, over and ball separated
        by ‘-’ (For ex. 335982-1-0-1 match_id-inning-over-ball) and rest of the columns same as deliveries_v03)
 
 
 
 
      create table deliveries_v04 as select * , id || '-' ||inning ||'-'||over||'-'||ball as ball_id from deliveries_v03 ;
 
 
 
      select * from deliveries_v04 ;
 
 
 
 
 Q18==> Compare the total count of rows and total count of distinct ball_id in deliveries_v04;


 
       select count(distinct ball_id) from deliveries_v04; --458


       select count(*) from deliveries_v04;--468
 
 
 
 
 
 
Q19==> SQL Row_Number() function is used to sort and assign row numbers to data rows in the presence of multiple groups.
       For example, to identify the top 10 rows which have the highest order amount in each region,
       we can use row_number to assign row numbers in each group (region) with any particular order (decreasing order of order amount)
       and then we can use this new column to apply filters.
       Using this knowledge, solve the following exercise. You can use hints to create an additional column of row number.
       Create table deliveries_v05 with all columns of deliveries_v04 and an additional column for row number partition over ball_id.
       (HINT : Syntax to add along with other columns,  row_number() over (partition by ball_id) as r_num)
 
 


 
     create table deliveries_v05 as select *, row_number() over (partition by ball_id) as r_num from deliveries_v04;
 
 
     select *from deliveries_v05 
 
 
 
 
 
 
 
 
Q20==> Use the r_num created in deliveries_v05 to identify instances where ball_id is repeating. (HINT : select * from deliveries_v05 WHERE r_num=2;)
 


 
    select count(*) from deliveries_v05; 


    select sum(r_num) from deliveries_v05; 


    select * from deliveries_v05 order by r_num  limit 20; 


    select * from deliveries_v05 WHERE r_num=2; 
 
 
 
 
 
Q21==>Use subqueries to fetch data of all the ball_id which are repeating.
     (HINT: SELECT * FROM deliveries_v05 WHERE ball_id in (select BALL_ID from deliveries_v05 WHERE r_num=2);




																			 
     SELECT * FROM deliveries_v05 WHERE ball_id in (select ball_id from deliveries_v05 WHERE r_num=2); 






                                   *************************************************** Thank You **********************************************************

